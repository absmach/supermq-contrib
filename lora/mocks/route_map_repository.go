// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewRouteMapRepository creates a new instance of RouteMapRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRouteMapRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RouteMapRepository {
	mock := &RouteMapRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RouteMapRepository is an autogenerated mock type for the RouteMapRepository type
type RouteMapRepository struct {
	mock.Mock
}

type RouteMapRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *RouteMapRepository) EXPECT() *RouteMapRepository_Expecter {
	return &RouteMapRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type RouteMapRepository
func (_mock *RouteMapRepository) Get(context1 context.Context, s string) (string, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(context1, s)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RouteMapRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RouteMapRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1
//   - s
func (_e *RouteMapRepository_Expecter) Get(context1 interface{}, s interface{}) *RouteMapRepository_Get_Call {
	return &RouteMapRepository_Get_Call{Call: _e.mock.On("Get", context1, s)}
}

func (_c *RouteMapRepository_Get_Call) Run(run func(context1 context.Context, s string)) *RouteMapRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RouteMapRepository_Get_Call) Return(s1 string, err error) *RouteMapRepository_Get_Call {
	_c.Call.Return(s1, err)
	return _c
}

func (_c *RouteMapRepository_Get_Call) RunAndReturn(run func(context1 context.Context, s string) (string, error)) *RouteMapRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function for the type RouteMapRepository
func (_mock *RouteMapRepository) Remove(context1 context.Context, s string) error {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(context1, s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RouteMapRepository_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type RouteMapRepository_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - context1
//   - s
func (_e *RouteMapRepository_Expecter) Remove(context1 interface{}, s interface{}) *RouteMapRepository_Remove_Call {
	return &RouteMapRepository_Remove_Call{Call: _e.mock.On("Remove", context1, s)}
}

func (_c *RouteMapRepository_Remove_Call) Run(run func(context1 context.Context, s string)) *RouteMapRepository_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RouteMapRepository_Remove_Call) Return(err error) *RouteMapRepository_Remove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RouteMapRepository_Remove_Call) RunAndReturn(run func(context1 context.Context, s string) error) *RouteMapRepository_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type RouteMapRepository
func (_mock *RouteMapRepository) Save(context1 context.Context, s string, s1 string) error {
	ret := _mock.Called(context1, s, s1)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(context1, s, s1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RouteMapRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type RouteMapRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - context1
//   - s
//   - s1
func (_e *RouteMapRepository_Expecter) Save(context1 interface{}, s interface{}, s1 interface{}) *RouteMapRepository_Save_Call {
	return &RouteMapRepository_Save_Call{Call: _e.mock.On("Save", context1, s, s1)}
}

func (_c *RouteMapRepository_Save_Call) Run(run func(context1 context.Context, s string, s1 string)) *RouteMapRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *RouteMapRepository_Save_Call) Return(err error) *RouteMapRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RouteMapRepository_Save_Call) RunAndReturn(run func(context1 context.Context, s string, s1 string) error) *RouteMapRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
