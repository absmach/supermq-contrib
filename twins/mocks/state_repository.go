// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	"github.com/absmach/supermq-contrib/twins"
	mock "github.com/stretchr/testify/mock"
)

// NewStateRepository creates a new instance of StateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateRepository {
	mock := &StateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// StateRepository is an autogenerated mock type for the StateRepository type
type StateRepository struct {
	mock.Mock
}

type StateRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *StateRepository) EXPECT() *StateRepository_Expecter {
	return &StateRepository_Expecter{mock: &_m.Mock}
}

// Count provides a mock function for the type StateRepository
func (_mock *StateRepository) Count(ctx context.Context, twin twins.Twin) (int64, error) {
	ret := _mock.Called(ctx, twin)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, twins.Twin) (int64, error)); ok {
		return returnFunc(ctx, twin)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, twins.Twin) int64); ok {
		r0 = returnFunc(ctx, twin)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, twins.Twin) error); ok {
		r1 = returnFunc(ctx, twin)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StateRepository_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type StateRepository_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx
//   - twin
func (_e *StateRepository_Expecter) Count(ctx interface{}, twin interface{}) *StateRepository_Count_Call {
	return &StateRepository_Count_Call{Call: _e.mock.On("Count", ctx, twin)}
}

func (_c *StateRepository_Count_Call) Run(run func(ctx context.Context, twin twins.Twin)) *StateRepository_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(twins.Twin))
	})
	return _c
}

func (_c *StateRepository_Count_Call) Return(n int64, err error) *StateRepository_Count_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *StateRepository_Count_Call) RunAndReturn(run func(ctx context.Context, twin twins.Twin) (int64, error)) *StateRepository_Count_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveAll provides a mock function for the type StateRepository
func (_mock *StateRepository) RetrieveAll(ctx context.Context, offset uint64, limit uint64, twinID string) (twins.StatesPage, error) {
	ret := _mock.Called(ctx, offset, limit, twinID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAll")
	}

	var r0 twins.StatesPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64, uint64, string) (twins.StatesPage, error)); ok {
		return returnFunc(ctx, offset, limit, twinID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64, uint64, string) twins.StatesPage); ok {
		r0 = returnFunc(ctx, offset, limit, twinID)
	} else {
		r0 = ret.Get(0).(twins.StatesPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint64, uint64, string) error); ok {
		r1 = returnFunc(ctx, offset, limit, twinID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StateRepository_RetrieveAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAll'
type StateRepository_RetrieveAll_Call struct {
	*mock.Call
}

// RetrieveAll is a helper method to define mock.On call
//   - ctx
//   - offset
//   - limit
//   - twinID
func (_e *StateRepository_Expecter) RetrieveAll(ctx interface{}, offset interface{}, limit interface{}, twinID interface{}) *StateRepository_RetrieveAll_Call {
	return &StateRepository_RetrieveAll_Call{Call: _e.mock.On("RetrieveAll", ctx, offset, limit, twinID)}
}

func (_c *StateRepository_RetrieveAll_Call) Run(run func(ctx context.Context, offset uint64, limit uint64, twinID string)) *StateRepository_RetrieveAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(uint64), args[3].(string))
	})
	return _c
}

func (_c *StateRepository_RetrieveAll_Call) Return(statesPage twins.StatesPage, err error) *StateRepository_RetrieveAll_Call {
	_c.Call.Return(statesPage, err)
	return _c
}

func (_c *StateRepository_RetrieveAll_Call) RunAndReturn(run func(ctx context.Context, offset uint64, limit uint64, twinID string) (twins.StatesPage, error)) *StateRepository_RetrieveAll_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveLast provides a mock function for the type StateRepository
func (_mock *StateRepository) RetrieveLast(ctx context.Context, twinID string) (twins.State, error) {
	ret := _mock.Called(ctx, twinID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveLast")
	}

	var r0 twins.State
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (twins.State, error)); ok {
		return returnFunc(ctx, twinID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) twins.State); ok {
		r0 = returnFunc(ctx, twinID)
	} else {
		r0 = ret.Get(0).(twins.State)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, twinID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StateRepository_RetrieveLast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveLast'
type StateRepository_RetrieveLast_Call struct {
	*mock.Call
}

// RetrieveLast is a helper method to define mock.On call
//   - ctx
//   - twinID
func (_e *StateRepository_Expecter) RetrieveLast(ctx interface{}, twinID interface{}) *StateRepository_RetrieveLast_Call {
	return &StateRepository_RetrieveLast_Call{Call: _e.mock.On("RetrieveLast", ctx, twinID)}
}

func (_c *StateRepository_RetrieveLast_Call) Run(run func(ctx context.Context, twinID string)) *StateRepository_RetrieveLast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *StateRepository_RetrieveLast_Call) Return(state twins.State, err error) *StateRepository_RetrieveLast_Call {
	_c.Call.Return(state, err)
	return _c
}

func (_c *StateRepository_RetrieveLast_Call) RunAndReturn(run func(ctx context.Context, twinID string) (twins.State, error)) *StateRepository_RetrieveLast_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type StateRepository
func (_mock *StateRepository) Save(ctx context.Context, state twins.State) error {
	ret := _mock.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, twins.State) error); ok {
		r0 = returnFunc(ctx, state)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// StateRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type StateRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx
//   - state
func (_e *StateRepository_Expecter) Save(ctx interface{}, state interface{}) *StateRepository_Save_Call {
	return &StateRepository_Save_Call{Call: _e.mock.On("Save", ctx, state)}
}

func (_c *StateRepository_Save_Call) Run(run func(ctx context.Context, state twins.State)) *StateRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(twins.State))
	})
	return _c
}

func (_c *StateRepository_Save_Call) Return(err error) *StateRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *StateRepository_Save_Call) RunAndReturn(run func(ctx context.Context, state twins.State) error) *StateRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type StateRepository
func (_mock *StateRepository) Update(ctx context.Context, state twins.State) error {
	ret := _mock.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, twins.State) error); ok {
		r0 = returnFunc(ctx, state)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// StateRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type StateRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - state
func (_e *StateRepository_Expecter) Update(ctx interface{}, state interface{}) *StateRepository_Update_Call {
	return &StateRepository_Update_Call{Call: _e.mock.On("Update", ctx, state)}
}

func (_c *StateRepository_Update_Call) Run(run func(ctx context.Context, state twins.State)) *StateRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(twins.State))
	})
	return _c
}

func (_c *StateRepository_Update_Call) Return(err error) *StateRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *StateRepository_Update_Call) RunAndReturn(run func(ctx context.Context, state twins.State) error) *StateRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
