// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	"github.com/absmach/supermq-contrib/twins"
	"github.com/absmach/supermq/pkg/messaging"
	mock "github.com/stretchr/testify/mock"
)

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// AddTwin provides a mock function for the type Service
func (_mock *Service) AddTwin(ctx context.Context, token string, twin twins.Twin, def twins.Definition) (twins.Twin, error) {
	ret := _mock.Called(ctx, token, twin, def)

	if len(ret) == 0 {
		panic("no return value specified for AddTwin")
	}

	var r0 twins.Twin
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, twins.Twin, twins.Definition) (twins.Twin, error)); ok {
		return returnFunc(ctx, token, twin, def)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, twins.Twin, twins.Definition) twins.Twin); ok {
		r0 = returnFunc(ctx, token, twin, def)
	} else {
		r0 = ret.Get(0).(twins.Twin)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, twins.Twin, twins.Definition) error); ok {
		r1 = returnFunc(ctx, token, twin, def)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Service_AddTwin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTwin'
type Service_AddTwin_Call struct {
	*mock.Call
}

// AddTwin is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - twin twins.Twin
//   - def twins.Definition
func (_e *Service_Expecter) AddTwin(ctx interface{}, token interface{}, twin interface{}, def interface{}) *Service_AddTwin_Call {
	return &Service_AddTwin_Call{Call: _e.mock.On("AddTwin", ctx, token, twin, def)}
}

func (_c *Service_AddTwin_Call) Run(run func(ctx context.Context, token string, twin twins.Twin, def twins.Definition)) *Service_AddTwin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 twins.Twin
		if args[2] != nil {
			arg2 = args[2].(twins.Twin)
		}
		var arg3 twins.Definition
		if args[3] != nil {
			arg3 = args[3].(twins.Definition)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *Service_AddTwin_Call) Return(tw twins.Twin, err error) *Service_AddTwin_Call {
	_c.Call.Return(tw, err)
	return _c
}

func (_c *Service_AddTwin_Call) RunAndReturn(run func(ctx context.Context, token string, twin twins.Twin, def twins.Definition) (twins.Twin, error)) *Service_AddTwin_Call {
	_c.Call.Return(run)
	return _c
}

// ListStates provides a mock function for the type Service
func (_mock *Service) ListStates(ctx context.Context, token string, offset uint64, limit uint64, twinID string) (twins.StatesPage, error) {
	ret := _mock.Called(ctx, token, offset, limit, twinID)

	if len(ret) == 0 {
		panic("no return value specified for ListStates")
	}

	var r0 twins.StatesPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uint64, uint64, string) (twins.StatesPage, error)); ok {
		return returnFunc(ctx, token, offset, limit, twinID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uint64, uint64, string) twins.StatesPage); ok {
		r0 = returnFunc(ctx, token, offset, limit, twinID)
	} else {
		r0 = ret.Get(0).(twins.StatesPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, uint64, uint64, string) error); ok {
		r1 = returnFunc(ctx, token, offset, limit, twinID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Service_ListStates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStates'
type Service_ListStates_Call struct {
	*mock.Call
}

// ListStates is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - offset uint64
//   - limit uint64
//   - twinID string
func (_e *Service_Expecter) ListStates(ctx interface{}, token interface{}, offset interface{}, limit interface{}, twinID interface{}) *Service_ListStates_Call {
	return &Service_ListStates_Call{Call: _e.mock.On("ListStates", ctx, token, offset, limit, twinID)}
}

func (_c *Service_ListStates_Call) Run(run func(ctx context.Context, token string, offset uint64, limit uint64, twinID string)) *Service_ListStates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uint64
		if args[2] != nil {
			arg2 = args[2].(uint64)
		}
		var arg3 uint64
		if args[3] != nil {
			arg3 = args[3].(uint64)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *Service_ListStates_Call) Return(statesPage twins.StatesPage, err error) *Service_ListStates_Call {
	_c.Call.Return(statesPage, err)
	return _c
}

func (_c *Service_ListStates_Call) RunAndReturn(run func(ctx context.Context, token string, offset uint64, limit uint64, twinID string) (twins.StatesPage, error)) *Service_ListStates_Call {
	_c.Call.Return(run)
	return _c
}

// ListTwins provides a mock function for the type Service
func (_mock *Service) ListTwins(ctx context.Context, token string, offset uint64, limit uint64, name string, metadata twins.Metadata) (twins.Page, error) {
	ret := _mock.Called(ctx, token, offset, limit, name, metadata)

	if len(ret) == 0 {
		panic("no return value specified for ListTwins")
	}

	var r0 twins.Page
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uint64, uint64, string, twins.Metadata) (twins.Page, error)); ok {
		return returnFunc(ctx, token, offset, limit, name, metadata)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uint64, uint64, string, twins.Metadata) twins.Page); ok {
		r0 = returnFunc(ctx, token, offset, limit, name, metadata)
	} else {
		r0 = ret.Get(0).(twins.Page)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, uint64, uint64, string, twins.Metadata) error); ok {
		r1 = returnFunc(ctx, token, offset, limit, name, metadata)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Service_ListTwins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTwins'
type Service_ListTwins_Call struct {
	*mock.Call
}

// ListTwins is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - offset uint64
//   - limit uint64
//   - name string
//   - metadata twins.Metadata
func (_e *Service_Expecter) ListTwins(ctx interface{}, token interface{}, offset interface{}, limit interface{}, name interface{}, metadata interface{}) *Service_ListTwins_Call {
	return &Service_ListTwins_Call{Call: _e.mock.On("ListTwins", ctx, token, offset, limit, name, metadata)}
}

func (_c *Service_ListTwins_Call) Run(run func(ctx context.Context, token string, offset uint64, limit uint64, name string, metadata twins.Metadata)) *Service_ListTwins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uint64
		if args[2] != nil {
			arg2 = args[2].(uint64)
		}
		var arg3 uint64
		if args[3] != nil {
			arg3 = args[3].(uint64)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 twins.Metadata
		if args[5] != nil {
			arg5 = args[5].(twins.Metadata)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *Service_ListTwins_Call) Return(page twins.Page, err error) *Service_ListTwins_Call {
	_c.Call.Return(page, err)
	return _c
}

func (_c *Service_ListTwins_Call) RunAndReturn(run func(ctx context.Context, token string, offset uint64, limit uint64, name string, metadata twins.Metadata) (twins.Page, error)) *Service_ListTwins_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTwin provides a mock function for the type Service
func (_mock *Service) RemoveTwin(ctx context.Context, token string, twinID string) error {
	ret := _mock.Called(ctx, token, twinID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTwin")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, token, twinID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Service_RemoveTwin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTwin'
type Service_RemoveTwin_Call struct {
	*mock.Call
}

// RemoveTwin is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - twinID string
func (_e *Service_Expecter) RemoveTwin(ctx interface{}, token interface{}, twinID interface{}) *Service_RemoveTwin_Call {
	return &Service_RemoveTwin_Call{Call: _e.mock.On("RemoveTwin", ctx, token, twinID)}
}

func (_c *Service_RemoveTwin_Call) Run(run func(ctx context.Context, token string, twinID string)) *Service_RemoveTwin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Service_RemoveTwin_Call) Return(err error) *Service_RemoveTwin_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Service_RemoveTwin_Call) RunAndReturn(run func(ctx context.Context, token string, twinID string) error) *Service_RemoveTwin_Call {
	_c.Call.Return(run)
	return _c
}

// SaveStates provides a mock function for the type Service
func (_mock *Service) SaveStates(ctx context.Context, msg *messaging.Message) error {
	ret := _mock.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for SaveStates")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *messaging.Message) error); ok {
		r0 = returnFunc(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Service_SaveStates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveStates'
type Service_SaveStates_Call struct {
	*mock.Call
}

// SaveStates is a helper method to define mock.On call
//   - ctx context.Context
//   - msg *messaging.Message
func (_e *Service_Expecter) SaveStates(ctx interface{}, msg interface{}) *Service_SaveStates_Call {
	return &Service_SaveStates_Call{Call: _e.mock.On("SaveStates", ctx, msg)}
}

func (_c *Service_SaveStates_Call) Run(run func(ctx context.Context, msg *messaging.Message)) *Service_SaveStates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *messaging.Message
		if args[1] != nil {
			arg1 = args[1].(*messaging.Message)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Service_SaveStates_Call) Return(err error) *Service_SaveStates_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Service_SaveStates_Call) RunAndReturn(run func(ctx context.Context, msg *messaging.Message) error) *Service_SaveStates_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTwin provides a mock function for the type Service
func (_mock *Service) UpdateTwin(ctx context.Context, token string, twin twins.Twin, def twins.Definition) error {
	ret := _mock.Called(ctx, token, twin, def)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTwin")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, twins.Twin, twins.Definition) error); ok {
		r0 = returnFunc(ctx, token, twin, def)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Service_UpdateTwin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTwin'
type Service_UpdateTwin_Call struct {
	*mock.Call
}

// UpdateTwin is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - twin twins.Twin
//   - def twins.Definition
func (_e *Service_Expecter) UpdateTwin(ctx interface{}, token interface{}, twin interface{}, def interface{}) *Service_UpdateTwin_Call {
	return &Service_UpdateTwin_Call{Call: _e.mock.On("UpdateTwin", ctx, token, twin, def)}
}

func (_c *Service_UpdateTwin_Call) Run(run func(ctx context.Context, token string, twin twins.Twin, def twins.Definition)) *Service_UpdateTwin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 twins.Twin
		if args[2] != nil {
			arg2 = args[2].(twins.Twin)
		}
		var arg3 twins.Definition
		if args[3] != nil {
			arg3 = args[3].(twins.Definition)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *Service_UpdateTwin_Call) Return(err error) *Service_UpdateTwin_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Service_UpdateTwin_Call) RunAndReturn(run func(ctx context.Context, token string, twin twins.Twin, def twins.Definition) error) *Service_UpdateTwin_Call {
	_c.Call.Return(run)
	return _c
}

// ViewTwin provides a mock function for the type Service
func (_mock *Service) ViewTwin(ctx context.Context, token string, twinID string) (twins.Twin, error) {
	ret := _mock.Called(ctx, token, twinID)

	if len(ret) == 0 {
		panic("no return value specified for ViewTwin")
	}

	var r0 twins.Twin
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (twins.Twin, error)); ok {
		return returnFunc(ctx, token, twinID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) twins.Twin); ok {
		r0 = returnFunc(ctx, token, twinID)
	} else {
		r0 = ret.Get(0).(twins.Twin)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, token, twinID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Service_ViewTwin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ViewTwin'
type Service_ViewTwin_Call struct {
	*mock.Call
}

// ViewTwin is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - twinID string
func (_e *Service_Expecter) ViewTwin(ctx interface{}, token interface{}, twinID interface{}) *Service_ViewTwin_Call {
	return &Service_ViewTwin_Call{Call: _e.mock.On("ViewTwin", ctx, token, twinID)}
}

func (_c *Service_ViewTwin_Call) Run(run func(ctx context.Context, token string, twinID string)) *Service_ViewTwin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Service_ViewTwin_Call) Return(tw twins.Twin, err error) *Service_ViewTwin_Call {
	_c.Call.Return(tw, err)
	return _c
}

func (_c *Service_ViewTwin_Call) RunAndReturn(run func(ctx context.Context, token string, twinID string) (twins.Twin, error)) *Service_ViewTwin_Call {
	_c.Call.Return(run)
	return _c
}
