// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	"github.com/absmach/supermq-contrib/twins"
	mock "github.com/stretchr/testify/mock"
)

// NewTwinCache creates a new instance of TwinCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTwinCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *TwinCache {
	mock := &TwinCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TwinCache is an autogenerated mock type for the TwinCache type
type TwinCache struct {
	mock.Mock
}

type TwinCache_Expecter struct {
	mock *mock.Mock
}

func (_m *TwinCache) EXPECT() *TwinCache_Expecter {
	return &TwinCache_Expecter{mock: &_m.Mock}
}

// IDs provides a mock function for the type TwinCache
func (_mock *TwinCache) IDs(ctx context.Context, channel string, subtopic string) ([]string, error) {
	ret := _mock.Called(ctx, channel, subtopic)

	if len(ret) == 0 {
		panic("no return value specified for IDs")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) ([]string, error)); ok {
		return returnFunc(ctx, channel, subtopic)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) []string); ok {
		r0 = returnFunc(ctx, channel, subtopic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, channel, subtopic)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TwinCache_IDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IDs'
type TwinCache_IDs_Call struct {
	*mock.Call
}

// IDs is a helper method to define mock.On call
//   - ctx
//   - channel
//   - subtopic
func (_e *TwinCache_Expecter) IDs(ctx interface{}, channel interface{}, subtopic interface{}) *TwinCache_IDs_Call {
	return &TwinCache_IDs_Call{Call: _e.mock.On("IDs", ctx, channel, subtopic)}
}

func (_c *TwinCache_IDs_Call) Run(run func(ctx context.Context, channel string, subtopic string)) *TwinCache_IDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TwinCache_IDs_Call) Return(strings []string, err error) *TwinCache_IDs_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *TwinCache_IDs_Call) RunAndReturn(run func(ctx context.Context, channel string, subtopic string) ([]string, error)) *TwinCache_IDs_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function for the type TwinCache
func (_mock *TwinCache) Remove(ctx context.Context, twinID string) error {
	ret := _mock.Called(ctx, twinID)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, twinID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TwinCache_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type TwinCache_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx
//   - twinID
func (_e *TwinCache_Expecter) Remove(ctx interface{}, twinID interface{}) *TwinCache_Remove_Call {
	return &TwinCache_Remove_Call{Call: _e.mock.On("Remove", ctx, twinID)}
}

func (_c *TwinCache_Remove_Call) Run(run func(ctx context.Context, twinID string)) *TwinCache_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TwinCache_Remove_Call) Return(err error) *TwinCache_Remove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TwinCache_Remove_Call) RunAndReturn(run func(ctx context.Context, twinID string) error) *TwinCache_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type TwinCache
func (_mock *TwinCache) Save(ctx context.Context, twin twins.Twin) error {
	ret := _mock.Called(ctx, twin)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, twins.Twin) error); ok {
		r0 = returnFunc(ctx, twin)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TwinCache_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type TwinCache_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx
//   - twin
func (_e *TwinCache_Expecter) Save(ctx interface{}, twin interface{}) *TwinCache_Save_Call {
	return &TwinCache_Save_Call{Call: _e.mock.On("Save", ctx, twin)}
}

func (_c *TwinCache_Save_Call) Run(run func(ctx context.Context, twin twins.Twin)) *TwinCache_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(twins.Twin))
	})
	return _c
}

func (_c *TwinCache_Save_Call) Return(err error) *TwinCache_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TwinCache_Save_Call) RunAndReturn(run func(ctx context.Context, twin twins.Twin) error) *TwinCache_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveIDs provides a mock function for the type TwinCache
func (_mock *TwinCache) SaveIDs(ctx context.Context, channel string, subtopic string, twinIDs []string) error {
	ret := _mock.Called(ctx, channel, subtopic, twinIDs)

	if len(ret) == 0 {
		panic("no return value specified for SaveIDs")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []string) error); ok {
		r0 = returnFunc(ctx, channel, subtopic, twinIDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TwinCache_SaveIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveIDs'
type TwinCache_SaveIDs_Call struct {
	*mock.Call
}

// SaveIDs is a helper method to define mock.On call
//   - ctx
//   - channel
//   - subtopic
//   - twinIDs
func (_e *TwinCache_Expecter) SaveIDs(ctx interface{}, channel interface{}, subtopic interface{}, twinIDs interface{}) *TwinCache_SaveIDs_Call {
	return &TwinCache_SaveIDs_Call{Call: _e.mock.On("SaveIDs", ctx, channel, subtopic, twinIDs)}
}

func (_c *TwinCache_SaveIDs_Call) Run(run func(ctx context.Context, channel string, subtopic string, twinIDs []string)) *TwinCache_SaveIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *TwinCache_SaveIDs_Call) Return(err error) *TwinCache_SaveIDs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TwinCache_SaveIDs_Call) RunAndReturn(run func(ctx context.Context, channel string, subtopic string, twinIDs []string) error) *TwinCache_SaveIDs_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type TwinCache
func (_mock *TwinCache) Update(ctx context.Context, twin twins.Twin) error {
	ret := _mock.Called(ctx, twin)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, twins.Twin) error); ok {
		r0 = returnFunc(ctx, twin)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TwinCache_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type TwinCache_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - twin
func (_e *TwinCache_Expecter) Update(ctx interface{}, twin interface{}) *TwinCache_Update_Call {
	return &TwinCache_Update_Call{Call: _e.mock.On("Update", ctx, twin)}
}

func (_c *TwinCache_Update_Call) Run(run func(ctx context.Context, twin twins.Twin)) *TwinCache_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(twins.Twin))
	})
	return _c
}

func (_c *TwinCache_Update_Call) Return(err error) *TwinCache_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TwinCache_Update_Call) RunAndReturn(run func(ctx context.Context, twin twins.Twin) error) *TwinCache_Update_Call {
	_c.Call.Return(run)
	return _c
}
